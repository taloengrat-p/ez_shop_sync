// Generated by Dart Safe Data Class Generator. * Change this header on extension settings *
// ignore_for_file: type=lint
import 'package:easy_localization/easy_localization.dart';
import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';

import 'package:ez_shop_sync/res/generated/locale.g.dart';
import 'package:ez_shop_sync/src/data/dto/hive_object/product.dart';
import 'package:ez_shop_sync/src/utils/extensions/string_extensions.dart';
import 'package:ez_shop_sync/src/widgets/buttons/button_widget.dart';
import 'package:ez_shop_sync/src/widgets/image/image_widget.dart';
import 'package:ez_shop_sync/src/widgets/price_group_select_widget.dart';
import 'package:ez_shop_sync/src/widgets/product_info_list_item.dart';
import 'package:ez_shop_sync/src/widgets/text_form_field/text_form_field_ui_widget.dart';

class BottomSheetAddCartSuccess {
  final num qty;
  final String? priceCategorySelected;

  const BottomSheetAddCartSuccess({
    required this.qty,
    required this.priceCategorySelected,
  });
}

class BottomSheetAddCartWidget extends StatefulWidget {
  final Product product;

  const BottomSheetAddCartWidget({
    super.key,
    required this.product,
  });

  @override
  _BottomSheetAddCartWidgetState createState() => _BottomSheetAddCartWidgetState();
}

class _BottomSheetAddCartWidgetState extends State<BottomSheetAddCartWidget> {
  late Product _productEditor;
  final _qtyTextController = TextEditingController(text: '1');
  String? priceCategory;

  @override
  void initState() {
    _productEditor = widget.product.copyWith();

    if (_productEditor.priceCategories?.length == 1) {
      priceCategory = _productEditor.priceCategories?.keys.first;
    }
    super.initState();
  }

  num? get qtyEditor => int.tryParse(_qtyTextController.text);
  num? get priceByCategorySelected =>
      _productEditor.priceCategories?.entries.where((mapEntry) => mapEntry.key == priceCategory).firstOrNull?.value;

  @override
  Widget build(BuildContext context) {
    return Padding(
      padding: const EdgeInsets.only(left: 16.0, right: 16, bottom: 8),
      child: Column(
        mainAxisSize: MainAxisSize.min,
        mainAxisAlignment: MainAxisAlignment.spaceBetween,
        children: [
          SingleChildScrollView(
            child: Column(
              children: [
                Row(
                  children: [
                    ImageWidget(
                      imageFullName: _productEditor.imageName,
                      width: 80,
                      height: 80,
                    ),
                    const SizedBox(
                      width: 8,
                    ),
                    ProductInfoListItem(
                      name: _productEditor.name,
                      desc: _productEditor.description,
                      price: ((priceByCategorySelected ?? 0) * (qtyEditor ?? 0)).toString().prefixCurrency(),
                    ),
                  ],
                ),
                const SizedBox(
                  height: 8,
                ),
                PriceGroupSelectWidget(
                  items: widget.product.priceCategories?.keys.toList() ?? [],
                  itemSelected: priceCategory,
                  onChange: (value) {
                    setState(() {
                      if (priceCategory == value) {
                        priceCategory = null;
                      } else {
                        priceCategory = value;
                      }
                    });
                  },
                ),
                const SizedBox(
                  height: 8,
                ),
                TextFormFieldUiWidget(
                  controller: _qtyTextController,
                  label: LocaleKeys.quantity.tr(),
                  autofocus: true,
                  keyboardType: const TextInputType.numberWithOptions(decimal: true),
                  onChanged: (value) {
                    Future.delayed(
                      Duration.zero,
                      () {
                        setState(() {
                          _qtyTextController.text = value?.trim() == '0' ? '' : value?.trim() ?? '';
                        });
                      },
                    );
                  },
                ),
              ],
            ),
          ),
          ButtonWidget(
            margin: const EdgeInsets.only(top: 16),
            label: LocaleKeys.addCart.tr(),
            leading: const Icon(CupertinoIcons.cart_badge_plus),
            backgroundColor: Colors.orange,
            onPressed: _qtyTextController.text.isEmpty ||
                    int.tryParse(_qtyTextController.text) == null ||
                    (priceCategory == null || (priceCategory?.isEmpty ?? false))
                ? null
                : () {
                    Navigator.of(context).pop(
                      BottomSheetAddCartSuccess(
                        qty: num.parse(_qtyTextController.text),
                        priceCategorySelected: priceCategory,
                      ),
                    );
                  },
          ),
        ],
      ),
    );
  }
}
